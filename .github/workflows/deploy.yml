name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Build the project
      run: dotnet publish -c Release -o ./output

    - name: Log in to Amazon ECR
      id: ecr_login
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the Docker image
      run: |
        docker build -t find-longest-array ./output
        docker tag find-longest-array:latest 571152679285.dkr.ecr.ap-southeast-2.amazonaws.com/find-longest-array:latest
        docker push 571152679285.dkr.ecr.ap-southeast-2.amazonaws.com/find-longest-array:latest

    - name: Deploy to AWS Lambda
      uses: aws-actions/aws-lambda-deploy@v1
      with:
        function-name: FindLongestArray
        image-uri: 571152679285.dkr.ecr.ap-southeast-2.amazonaws.com/find-longest-array:latest



name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Amazon ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and push Docker image
        run: |
          docker build -t find-longest-array .
          docker tag find-longest-array:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/find-longest-array:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/find-longest-array:latest
